import os
from pathlib import Path

def extract_docstring(file_path: str) -> str:
    """Extract the first module-level docstring from a Python file."""
    with open(file_path, "r", encoding="utf-8") as f:
        content = f.read()
    for quote in ('"""', "'''"):
        if quote in content:
            start = content.find(quote) + 3
            end = content.find(quote, start)
            if end > start:
                return content[start:end].strip()
    return "No module docstring found."

def generate_readme():
    project_name = Path.cwd().name
    files = sorted(
        [f for f in os.listdir() if f.endswith(".py") and f != "scripts/generate_readme.py" and not f.startswith("__")]
    )

    readme = [
        f"# {project_name}",
        "",
        f"Auto-generated README for **{project_name}**.",
        "",
        "## Project Overview",
        "",
        "This README was automatically generated by reading Python source files.",
        "",
        "## Python Modules",
        "",
    ]

    for file in files:
        doc = extract_docstring(file)
        readme.append(f"### `{file}`")
        readme.append("")
        readme.append(doc)
        readme.append("")

    if os.path.exists("requirements.txt"):
        readme.append("## Dependencies")
        readme.append("")
        with open("requirements.txt", "r", encoding="utf-8") as reqs:
            for dep in reqs:
                dep = dep.strip()
                if dep:
                    readme.append(f"- {dep}")
        readme.append("")

    readme.append("---")
    readme.append("README auto-generated via GitHub Actions.")

    Path("README.md").write_text("\\n".join(readme), encoding="utf-8")
    print("README.md generated successfully.")

if __name__ == "__main__":
    generate_readme()
