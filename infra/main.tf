terraform {
  required_version = ">= 1.6.0"

  required_providers {
    github = {
      source  = "integrations/github"
      version = ">= 6.0.0"
    }
  }
}

provider "github" {
  token = var.github_token
  owner = var.github_owner
}

data "github_repository" "repo" {
  name = var.repository
}

resource "github_repository_file" "workflow_generate_readme" {
  repository          = data.github_repository.repo.name
  branch              = var.branch
  file                = ".github/workflows/generate-readme.yml"
  commit_message      = "ci: add workflow to auto-generate README"
  overwrite_on_create = true

  content = <<-YAML
    name: Auto-generate README

    on:
      push:
        branches:
          - main
          - dev
      workflow_dispatch:

    permissions:
      contents: write

    jobs:
      generate-readme:
        runs-on: ubuntu-latest

        steps:
          - name: Checkout repository
            uses: actions/checkout@v4

          - name: Set up Python
            uses: actions/setup-python@v5
            with:
              python-version: '3.14'

          - name: Install uv
            run: pip install uv

          - name: Generate README
            run: uv run python scripts/generate_readme.py

          - name: Commit and push README
            run: |
              git config user.name "github-actions[bot]"
              git config user.email "github-actions[bot]@users.noreply.github.com"
              git add README.md
              git commit -m "chore(ci): auto-generate README file" || echo "No changes to commit"
              git push
  YAML
}

resource "github_repository_file" "generator_script" {
  repository          = data.github_repository.repo.name
  branch              = var.branch
  file                = "scripts/generate_readme.py"
  commit_message      = "fix: improve README generator formatting"
  overwrite_on_create = true

  content = <<-PY
    import os
    from pathlib import Path

    def extract_docstring(file_path: str) -> str:
        """Extract the first module-level docstring from a Python file."""
        with open(file_path, "r", encoding="utf-8") as f:
            content = f.read()
        for quote in ('"""', "'''"):
            if quote in content:
                start = content.find(quote) + 3
                end = content.find(quote, start)
                if end > start:
                    return content[start:end].strip()
        return "No module docstring found."

    def generate_readme():
        project_name = Path.cwd().name
        files = sorted(
            [f for f in os.listdir() if f.endswith(".py") and f != "scripts/generate_readme.py" and not f.startswith("__")]
        )

        readme = [
            f"# {project_name}",
            "",
            f"Auto-generated README for **{project_name}**.",
            "",
            "## Project Overview",
            "",
            "This README was automatically generated by reading Python source files.",
            "",
            "## Python Modules",
            "",
        ]

        for file in files:
            doc = extract_docstring(file)
            readme.append(f"### `{file}`")
            readme.append("")
            readme.append(doc)
            readme.append("")

        if os.path.exists("requirements.txt"):
            readme.append("## Dependencies")
            readme.append("")
            with open("requirements.txt", "r", encoding="utf-8") as reqs:
                for dep in reqs:
                    dep = dep.strip()
                    if dep:
                        readme.append(f"- {dep}")
            readme.append("")

        readme.append("---")
        readme.append("README auto-generated via GitHub Actions.")

        Path("README.md").write_text("\\n".join(readme), encoding="utf-8")
        print("README.md generated successfully.")

    if __name__ == "__main__":
        generate_readme()
  PY
}
